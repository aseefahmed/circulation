name: Test Circulation & Build Docker Images
on: [push]
env:
  POSTGRES_USER: simplified_test
  POSTGRES_PASSWORD: test
  POSTGRES_DB: simplified_circulation_test
  SIMPLIFIED_TEST_DATABASE: postgres://simplified_test:test@localhost:5432/simplified_circulation_test

jobs:
  test-circulation:
    name: Run Circulation Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:9.6
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_INITDB_ARGS: "--nosync"
        options: --tmpfs /var/lib/postgresql/data:rw

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build image for testing
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile.exec
          load: true
          tags: circulation
          cache-from: type=registry,${{ github.repository_owner }}/circ-cache
          cache-to: type=registry,${{ github.repository_owner }}/circ-cache,mode=max

      - name: Run Circulation Tests
        run: >
          docker run
          --network ${{ job.services.postgres.network }}
          -e TESTING=true
          -e PYTHONWARNINGS=ignore
          -e SIMPLIFIED_DB_TASK="ignore"
          -e SIMPLIFIED_TEST_DATABASE='postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@postgres:5432/${{ env.POSTGRES_DB }}'
          -w /var/www/circulation
          circulation
          /bin/bash -c
          "source env/bin/activate && nosetests -v tests"

  test-core:
    name: Run Core Tests
    runs-on: ubuntu-latest

    env:
      SIMPLIFIED_TEST_MINIO_USER: simplified
      SIMPLIFIED_TEST_MINIO_PASSWORD: 12345678901234567890

    services:
      postgres:
        image: postgres:9.6
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_INITDB_ARGS: "--nosync"
        options: --tmpfs /var/lib/postgresql/data:rw
      elasticsearch:
        image: elasticsearch:6.4.0
        env:
          discovery.type: single-node
      minio:
        image: bitnami/minio:latest
        env:
          MINIO_ACCESS_KEY: ${{ env.SIMPLIFIED_TEST_MINIO_USER }}
          MINIO_SECRET_KEY: ${{ env.SIMPLIFIED_TEST_MINIO_PASSWORD }}

    steps:
      - uses: actions/checkout@v2

      - name: Configure Elasticsearch Container
        run: |
          docker exec ${{ job.services.elasticsearch.id }} elasticsearch-plugin install analysis-icu
          docker restart ${{ job.services.elasticsearch.id }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build image for testing
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile.exec
          load: true
          tags: circulation
          cache-from: type=registry,${{ github.repository_owner }}/circ-cache
          cache-to: type=registry,${{ github.repository_owner }}/circ-cache,mode=max

      - name: Run Core Tests
        run: >
          docker run
          --network ${{ job.services.postgres.network }}
          -e TESTING=true
          -e PYTHONWARNINGS=ignore
          -e SIMPLIFIED_DB_TASK="ignore"
          -e SIMPLIFIED_TEST_DATABASE="postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@postgres:5432/${{ env.POSTGRES_DB }}"
          -e SIMPLIFIED_TEST_ELASTICSEARCH="http://elasticsearch:9200"
          -e SIMPLIFIED_TEST_MINIO_ENDPOINT_URL="http://minio:9000"
          -e SIMPLIFIED_TEST_MINIO_USER="${{ env.SIMPLIFIED_TEST_MINIO_USER }}"
          -e SIMPLIFIED_TEST_MINIO_PASSWORD="${{ env.SIMPLIFIED_TEST_MINIO_PASSWORD }}"
          -w /var/www/circulation
          circulation
          /bin/bash -c
          "source env/bin/activate && nosetests -v core/tests"

  build-docker:
    name: Build and push docker images
    runs-on: ubuntu-latest
    needs: [test-circulation, test-core]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Branch name
        id: branch_name
        run: |
          echo ::set-output name=SOURCE_BRANCH::$(echo $GITHUB_REF | sed 's|refs/heads/||' | sed 's|/|-|')
          echo ::set-output name=SOURCE_TAG::$(echo $GITHUB_REF | sed 's|refs/tags/||' | sed 's|/|-|')

      - name: Build and push circ-exed image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile.exec
          push: true
          tags: ${{ github.repository_owner }}/circ-exec:${{ steps.branch_name.outputs.SOURCE_BRANCH }}
          cache-from: type=registry,${{ github.repository_owner }}/circ-cache
          cache-to: type=registry,${{ github.repository_owner }}/circ-cache,mode=max

      - name: Build and push circ-scripts image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile.scripts
          push: true
          tags: ${{ github.repository_owner }}/circ-scripts:${{ steps.branch_name.outputs.SOURCE_BRANCH }}
          cache-from: type=registry,${{ github.repository_owner }}/circ-cache
          cache-to: type=registry,${{ github.repository_owner }}/circ-cache,mode=max

      - name: Build and push circ-web image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile.webapp
          push: true
          tags: ${{ github.repository_owner }}/circ-webapp:${{ steps.branch_name.outputs.SOURCE_BRANCH }}
          cache-from: type=registry,${{ github.repository_owner }}/circ-cache
          cache-to: type=registry,${{ github.repository_owner }}/circ-cache,mode=max
